#!/usr/bin/env python
# -- encoding: utf-8 --
#
# Copyright 2015 Telefónica Investigación y Desarrollo, S.A.U
#
# This file is part of FI-Core project.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
#
# You may obtain a copy of the License at:
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#
# See the License for the specific language governing permissions and
# limitations under the License.
#
# For those usages not covered by the Apache version 2.0 License please
# contact with opensource@tid.es
#
import cPickle as pickle
import datetime

from os import environ as env
import os
from fiwareskuld.user_resources import UserResources
import fiwareskuld.conf.settings
from fiwareskuld.utils import log


__author__ = 'chema'

logger = log.init_logs('phase2')

free_trust_id = False
stopped_vms = 0
unshared_images = 0
dict_vms = dict()
failed_users = set()

# Ensure we are not using other credentials
if 'OS_USERNAME' in env:
    del env['OS_USERNAME']
if 'OS_TENANT_NAME' in env:
    del env['OS_TENANT_NAME']
if 'OS_TENANT_ID' in env:
    del env['OS_TENANT_ID']
if 'OS_TRUST_ID' in env:
    del env['OS_TRUST_ID']
if 'OS_PASSWORD' in env:
        del env['OS_PASSWORD']


if os.path.exists('users_trusted_ids.txt'):
    use_trust_ids = True
    # The output was generated by the process that create trust-ids
    users_trusted_ids = open('users_trusted_ids.txt')
    if 'TRUSTEE_PASSWORD' in env:
        password = env['TRUSTEE_PASSWORD']
    elif 'TRUSTEE_PASSWORD' in dir(fiwareskuld.conf.settings):
        password = fiwareskuld.conf.settings.TRUSTEE_PASSWORD
    else:
        msg = 'TRUSTEE_PASSWORD must be defined, either in settings or environ'
        raise Exception(msg)

    if 'TRUSTEE_USER' in env:
        trustee = env['TRUSTEE_USER']
    else:
        trustee = fiwareskuld.conf.settings.TRUSTEE

    lines = users_trusted_ids.readlines()
    user_count = 0
    user_total = len(lines)
    for line in lines:
        (user, trust_id, user_id) = line.strip().split(',')
        user_count += 1
        logger.info('Stopping active VMs of user {3} {0} ({1}/{2})'.format(
            user, user_count, user_total, user_id))

        try:
            user_resources = UserResources(
                trustee, password, trust_id=trust_id)
            vms = user_resources.get_resources_dict()['vms']
            dict_vms[user] = vms
            stopped = user_resources.stop_tenant_vms()
            stopped_vms += stopped
            logger.info('Stopped {0} (total {1})'.format(stopped, stopped_vms))
            logger.info('Unshare public images of user ' + user)
            user_resources.unshare_images()
            if 'DONT_FREE_TRUST_ID' not in env:
                user_resources.free_trust_id()
        except Exception, e:
            logger.error('Failed operations with user ' + user + ' cause: ' +
                         str(e))
            failed_users.add(user)

    print('Stopped servers: ' + str(stopped_vms))

elif os.path.exists('users_credentials.txt'):
    # The output was generated by the process that change the passwords
    use_trust_ids = False

    users_credentials = open('users_credentials.txt')

    for line in users_credentials.readlines():
        (user, password, tenant_id) = line.strip().split(',')
        logger.info('Stopping active VMs of user ' + user)
        user_resources = UserResources(user, password, tenant_id=tenant_id)
        user_resources.stop_tenant_vms()
        logger.info('Unshare public images of user ' + user)
        user_resources.unshare_images()
else:
    msg = 'either users_trusted_ids.txt or users_credentials.txt must exist'
    logger.error(msg)

now = datetime.datetime.now().isoformat()
with open('stopresources_report_' + now + '.pickle', 'wf') as f:
    pickle.dump(dict_vms, f, protocol=-1)

with open('stopresources_error_report_' + now + '.log', 'w') as f:
    for user in failed_users:
        f.write(user + '\n')
