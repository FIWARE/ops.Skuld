#!/usr/bin/env python
# -- encoding: utf-8 --
#
# Copyright 2015 Telefónica Investigación y Desarrollo, S.A.U
#
# This file is part of FI-Core project.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
#
# You may obtain a copy of the License at:
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#
# See the License for the specific language governing permissions and
# limitations under the License.
#
# For those usages not covered by the Apache version 2.0 License please
# contact with opensource@tid.es
#
author = 'chema'

from os import environ as env
import os.path
import cPickle as pickle
import logging
import datetime

from user_resources import UserResources
from settings.settings import TRUSTEE

logging.debug('start delete script')
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

images_in_use = None
if os.path.exists('imagesinuse.pickle'):
    images_in_use = pickle.load(open('imagesinuse.pickle'))

if os.path.exists('users_trusted_ids.txt'):
    # The output was generated by the process that create trust-ids
    users_trusted_ids = open('users_trusted_ids.txt')
    # clean credential
    if 'OS_USERNAME' in env:
        del env['OS_USERNAME']
    if 'OS_TENANT_NAME' in env:
        del env['OS_TENANT_NAME']
    if 'OS_TENANT_ID' in env:
        del env['OS_TENANT_ID']
    if 'OS_TRUST_ID' in env:
        del env['OS_TRUST_ID']

    users_list = list()
    report = dict()
    report_l = list()
    for line in users_trusted_ids.readlines():
        (user, trust_id) = line.strip().split(',')
        logger.info('Obtaining resources of user ' + user)
        password = env['OS_PASSWORD']
        user_resources = UserResources(TRUSTEE, password,
                                       trust_id=trust_id)
        try:
            report[user] = user_resources.get_resources_dict()
        except Exception, e:
            logging.error('Calculating resources of user ' + user + ' failed')
            continue

        report_l.append(user)
        if images_in_use:
            user_resources.imagesinuse = images_in_use

        users_list.append(user_resources)

    # Avoid pauses
    for user_resources in users_list:
        user_resources.delete_tenant_resources_pri_1()

    for user_resources in users_list:
        user_resources.delete_tenant_resources_pri_2()

    users = iter(report_l)
    for user_resources in users_list:
        user_resources.delete_tenant_resources_pri_3()
        # user_resources.delete_tenant_resources()
        # tuple with user's resources before and after deletion.
        user = users.next()
        report[user] = (report[user], user_resources.get_resources_dict())
        if 'DONT_FREE_TRUST_ID' not in env:
            user_resources.free_trust_id()

elif os.path.exists('users_credentials.txt'):
    # The output was generated by the process that change the passwords

    # Ensure we are not using other credentials
    if 'OS_USERNAME' in env:
        del env['OS_USERNAME']
    if 'OS_PASSWORD' in env:
        del env['OS_PASSWORD']
    if 'OS_TENANT_NAME' in env:
        del env['OS_TENANT_NAME']
    if 'OS_TENANT_ID' in env:
        del env['OS_TENANT_ID']

    users_credentials = open('users_credentials.txt')
    users_list = list()
    report = dict()
    report_l = list()
    for line in users_credentials.readlines():
        (user, password, tenant_id) = line.strip().split(',')
        print 'Deleting resources of user ' + user
        user_resources = UserResources(user, password, tenant_id)
        report[user] = user_resources.get_resources_dict()
        report_l.append(user)

        if images_in_use:
            user_resources.imagesinuse = images_in_use

    # Avoid pauses
    for user_resources in users_list:
        user_resources.delete_tenant_resources_pri_1()

    for user_resources in users_list:
        user_resources.delete_tenant_resources_pri_2()

    users = iter(report_l)
    for user_resources in users_list:
        user_resources.delete_tenant_resources_pri_3()
        # user_resources.delete_tenant_resources()

# Save report

now = datetime.datetime.now().isoformat()
with open('freeresources_report_' + now + '.pickle', 'wf') as f:
    pickle.dump(report, f, protocol=-1)
